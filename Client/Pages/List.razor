@page "/list"
@inject IExpenseService ExpenseService
@inject NavigationManager NavigationManager

<PageTitle>Expense List</PageTitle>

<!-- await Task.Delay() To Let Loading Spinner Spin While DB Items Load -->
@if(!isLoaded)
{
    <div class="spinner spinner-border" />
}
else
{
<!-- Once (isLoaded == True) Load Main List -->
<h4>Expense Tracker</h4>
<!-- Total Items & Total Amount Constantly Tracked/Updated -->
<h4>Current Items: @totalItems Current Total: $@totalAmount </h4>
<table class = "table">
    <thead class="table">
        <tr>
            <th scope-"col">Item</th>
            <th scope-"col">Amount</th>
            <th scope-"col">Type</th>
            <th scope-"col"></th>
        </tr>
    </thead>
    <tbody>
        <!-- For Each Item In ExpenseService.Expense List Print Data To Table -->
        @foreach(var expense in ExpenseService.Expenses)
        {
            <tr>  
                <td>@expense.Name</td>
                <td>$@expense.Amount</td>
                <td>@expense.ItemSet.Name</td>
                <td>
                    <!-- Button Is Assigned To Each expense Item // On Click That Specific Item Will Be Loaded Via expense.Id
                         Loads /item/{id} Razor Page With Current Items Data In Boxes Ready For Edit/Delete -->
                    <button class="btn btn-outline-primary" @onclick="(() => ShowExpense(expense.Id))"><i class="oi oi-pencil"></i></button>
                </td>              
            </tr>
        }
    </tbody>
</table>
<!-- Loads /item Razor Page Ready To Be Filled & Added To List  -->
<button type="submit" class="btn btn-outline-primary" @onclick="CreateItem">Add Item</button>
}




@code {
    private bool isLoaded = false;
    private int totalItems;
    private decimal totalAmount;


    protected override async Task OnInitializedAsync()
    {
        /* Loading List On Page Load */
        await ExpenseService.GetExpenses();

        foreach(var expense in ExpenseService.Expenses)
        {
            /* Tracking Total Items/Total Cost Every Page Load */
            totalItems++;
            totalAmount += expense.Amount;
        }

        /* Task Delay For Spinner/DB Load In */
        await Task.Delay(800);
        isLoaded = true;

    }
    /* Method Using NavigationManager To Send User To item/{id} Page To Edit/Delete Item
     *  Sending Item Id So Page Knows What Expense To Load */
    void ShowExpense(int id)
    {
        NavigationManager.NavigateTo($"item/{id}");
    }
    /* Method Using NavigationManager To SEnd User To Blank item Page To Create New Item */
    void CreateItem()
    {
        NavigationManager.NavigateTo("item");
    }
}
